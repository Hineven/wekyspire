<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/RestScreen.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/RestScreen.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;rest-screen&quot; :class=&quot;{'remi-present-rest-screen': gameState.isRemiPresent}&quot;&gt;&#10;    &lt;div class=&quot;rest-screen-content&quot;&gt;&#10;      &lt;h1 class=&quot;rest-title&quot;&gt;{{ gameState.isRemiPresent ? '好好休息！' : '休整阶段'}}&lt;/h1&gt;&#10;      &#10;      &lt;div class=&quot;content-wrapper&quot;&gt;&#10;        &lt;!-- 左侧固定大小面板容器 --&gt;&#10;        &lt;div class=&quot;left-panel-container&quot;&gt;&#10;          &lt;!-- 金钱奖励面板 --&gt;&#10;          &lt;MoneyRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'money'&quot;&#10;            :amount=&quot;gameState.rewards.money&quot;&#10;            @claimed=&quot;onMoneyRewardClaimed&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 突破奖励面板 --&gt;&#10;          &lt;BreakthroughRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'breakthrough'&quot;&#10;            @claimed=&quot;onBreakthroughRewardClaimed&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 技能奖励面板 --&gt;&#10;          &lt;SkillRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'skill'&quot;&#10;            :skills=&quot;gameState.rewards.skills&quot;&#10;            @close=&quot;closeSkillRewardPanel&quot;&#10;            @selected-skill-reward=&quot;onSkillRewardSelected&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 能力奖励面板 --&gt;&#10;          &lt;AbilityRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'ability'&quot;&#10;            :abilities=&quot;gameState.rewards.abilities&quot;&#10;            @selected-ability-reward=&quot;onAbilityRewardSelected&quot;&#10;            @close=&quot;closeAbilityRewardPanel&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 商店面板 --&gt;&#10;          &lt;ShopPanel&#10;        :is-visible=&quot;currentRewardPanel === 'shop'&quot;&#10;        :shop-items=&quot;gameState.shopItems&quot;&#10;        :game-state=&quot;gameState&quot;&#10;        @close=&quot;closeShopPanel&quot;&#10;      /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- 右侧玩家状态面板 --&gt;&#10;        &lt;PlayerStatusPanel :player=&quot;gameState.player&quot; :restScreen=&quot;true&quot;/&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;SkillSlotSelectionPanel&#10;        :is-visible=&quot;skillSlotSelectionPanelVisible&quot;&#10;        :skill-slots=&quot;gameState.player.skillSlots&quot;&#10;        :skill=&quot;claimingSkill&quot;&#10;        @select-slot=&quot;onSkillSlotSelected&quot;&#10;        @close=&quot;closeSkillSlotSelectionPanel&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import ColoredText from './ColoredText.vue';&#10;import AbilityRewardPanel from './AbilityRewardPanel.vue';&#10;import SkillRewardPanel from './SkillRewardPanel.vue';&#10;import SkillSlotSelectionPanel from './SkillSlotSelectionPanel.vue';&#10;import ShopPanel from './ShopPanel.vue';&#10;import PlayerStatusPanel from './PlayerStatusPanel.vue';&#10;import MoneyRewardPanel from './MoneyRewardPanel.vue';&#10;import BreakthroughRewardPanel from './BreakthroughRewardPanel.vue';&#10;import frontendEventBus from &quot;../frontendEventBus&quot;;&#10;import backendEventBus, { EventNames } from &quot;../backendEventBus&quot;;&#10;&#10;export default {&#10;  name: 'RestScreen',&#10;  components: {&#10;    ColoredText,&#10;    AbilityRewardPanel,&#10;    SkillRewardPanel,&#10;    SkillSlotSelectionPanel,&#10;    ShopPanel,&#10;    PlayerStatusPanel,&#10;    MoneyRewardPanel,&#10;    BreakthroughRewardPanel&#10;  },&#10;  props: {&#10;    gameState: {&#10;      type: Object,&#10;      required: true&#10;    }&#10;  },&#10;  data() {&#10;    return {&#10;      currentRewardPanel: '', // 'money', 'breakthrough', 'skill', 'ability', 'shop' or empty&#10;      skillSlotSelectionPanelVisible: false,&#10;      claimingSkill: null,&#10;      rewardPanels: [],&#10;      currentRewardIndex: 0&#10;    }&#10;  },&#10;  mounted() {&#10;    // 初始化奖励面板队列&#10;    this.initRewardPanels();&#10;    // 显示第一个奖励面板&#10;    this.showNextRewardPanel();&#10;    // 监听后端商品购买，弹出UI消息&#10;    backendEventBus.on(EventNames.Shop.ITEM_PURCHASED, (purchasedItem) =&gt; {&#10;      frontendEventBus.emit(&quot;pop-message&quot;, {&#10;        id: 'item-purchased',&#10;        text: `购买了物品：${purchasedItem.name}`&#10;      });&#10;    });&#10;  },&#10;  beforeUnmount() {&#10;    backendEventBus.off &amp;&amp; backendEventBus.off(EventNames.Shop.ITEM_PURCHASED);&#10;  },&#10;  methods: {&#10;    initRewardPanels() {&#10;      this.rewardPanels = [];&#10;      &#10;      // 按顺序添加奖励面板&#10;      if (this.gameState.rewards.money &gt; 0) {&#10;        this.rewardPanels.push('money');&#10;      }&#10;      &#10;      if (this.gameState.rewards.breakthrough) {&#10;        this.rewardPanels.push('breakthrough');&#10;      }&#10;      &#10;      if (this.gameState.rewards.skills.length &gt; 0) {&#10;        this.rewardPanels.push('skill');&#10;      }&#10;      &#10;      if (this.gameState.rewards.abilities.length &gt; 0) {&#10;        this.rewardPanels.push('ability');&#10;      }&#10;      &#10;      // 总是添加商店面板&#10;      this.rewardPanels.push('shop'); &#10;    },&#10;    &#10;    showNextRewardPanel() {&#10;      // 先隐藏当前面板&#10;      this.currentRewardPanel = 'none';&#10;      // 稍等片刻后，再显示下一个面板&#10;      setTimeout(()=&gt; {&#10;        if (this.currentRewardIndex &lt; this.rewardPanels.length) {&#10;          this.currentRewardPanel = this.rewardPanels[this.currentRewardIndex];&#10;        } else {&#10;          // 所有奖励面板都已显示完毕&#10;          this.currentRewardPanel = '';&#10;        }&#10;      }, 500);&#10;    },&#10;    &#10;    onMoneyRewardClaimed() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    onBreakthroughRewardClaimed() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    closeSkillRewardPanel() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    closeAbilityRewardPanel() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;&#10;    onSkillRewardSelected(currentSkill) {&#10;      this.claimingSkill = currentSkill;&#10;      // 稍等片刻后打开SkillSlotSelectionPanel，让动画放完&#10;      setTimeout(() =&gt; {&#10;        this.skillSlotSelectionPanelVisible = true;&#10;      }, 300);&#10;    },&#10;    closeSkillSlotSelectionPanel() {&#10;      this.skillSlotSelectionPanelVisible = false;&#10;    },&#10;    onSkillSlotSelected(slotIndex) {&#10;      backendEventBus.emit(EventNames.Rest.CLAIM_SKILL, {&#10;        skill: this.claimingSkill,&#10;        slotIndex,&#10;        clearRewards: false&#10;      });&#10;      // 关闭面板&#10;      this.closeSkillSlotSelectionPanel();&#10;      this.closeSkillRewardPanel();&#10;    },&#10;    onAbilityRewardSelected(ability) {&#10;      backendEventBus.emit(EventNames.Rest.CLAIM_ABILITY, {&#10;        ability,&#10;        clearRewards: false&#10;      });&#10;      this.closeAbilityRewardPanel();&#10;    },&#10;    closeShopPanel() {&#10;      // 结束休整阶段，开始下一场战斗（后端流程监听）&#10;      backendEventBus.emit(EventNames.Rest.FINISH);&#10;    }&#10;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.rest-screen {&#10;  height: 100%;&#10;  width: 100%;&#10;  background-size: cover;&#10;}&#10;&#10;.remi-present-rest-screen {&#10;  background-image: url('@assets/images/shop-background.png');&#10;}&#10;&#10;.rest-screen-content {&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;  max-width: 1200px;&#10;}&#10;&#10;.content-wrapper {&#10;  display: flex;&#10;  flex-direction: row;&#10;  gap: 20px;&#10;  justify-content: center;&#10;  align-items: flex-start;&#10;}&#10;&#10;.rest-title {&#10;  font-size: 2em;&#10;  margin-bottom: 20px;&#10;  color: #eef7ff;&#10;}&#10;&#10;.left-panel-container {&#10;  width: 800px;&#10;  height: 220px;&#10;  position: relative;&#10;  flex-shrink: 0;&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div class=&quot;rest-screen&quot; :class=&quot;{'remi-present-rest-screen': gameState.isRemiPresent}&quot;&gt;&#10;    &lt;div class=&quot;rest-screen-content&quot;&gt;&#10;      &lt;h1 class=&quot;rest-title&quot;&gt;{{ gameState.isRemiPresent ? '好好休息！' : '休整阶段'}}&lt;/h1&gt;&#10;      &#10;      &lt;div class=&quot;content-wrapper&quot;&gt;&#10;        &lt;!-- 左侧固定大小面板容器 --&gt;&#10;        &lt;div class=&quot;left-panel-container&quot;&gt;&#10;          &lt;!-- 金钱奖励面板 --&gt;&#10;          &lt;MoneyRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'money'&quot;&#10;            :amount=&quot;gameState.rewards.money&quot;&#10;            @claimed=&quot;onMoneyRewardClaimed&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 突破奖励面板 --&gt;&#10;          &lt;BreakthroughRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'breakthrough'&quot;&#10;            @claimed=&quot;onBreakthroughRewardClaimed&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 技能奖励面板 --&gt;&#10;          &lt;SkillRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'skill'&quot;&#10;            :skills=&quot;gameState.rewards.skills&quot;&#10;            @close=&quot;closeSkillRewardPanel&quot;&#10;            @selected-skill-reward=&quot;onSkillRewardSelected&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 能力奖励面板 --&gt;&#10;          &lt;AbilityRewardPanel&#10;            :is-visible=&quot;currentRewardPanel === 'ability'&quot;&#10;            :abilities=&quot;gameState.rewards.abilities&quot;&#10;            @selected-ability-reward=&quot;onAbilityRewardSelected&quot;&#10;            @close=&quot;closeAbilityRewardPanel&quot;&#10;          /&gt;&#10;          &#10;          &lt;!-- 商店面板 --&gt;&#10;          &lt;ShopPanel&#10;        :is-visible=&quot;currentRewardPanel === 'shop'&quot;&#10;        :shop-items=&quot;gameState.shopItems&quot;&#10;        :game-state=&quot;gameState&quot;&#10;        @close=&quot;closeShopPanel&quot;&#10;      /&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;!-- 右侧玩家状态面板 --&gt;&#10;        &lt;PlayerStatusPanel :player=&quot;gameState.player&quot; :restScreen=&quot;true&quot;/&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;SkillSlotSelectionPanel&#10;        :is-visible=&quot;skillSlotSelectionPanelVisible&quot;&#10;        :skill-slots=&quot;gameState.player.skillSlots&quot;&#10;        :skill=&quot;claimingSkill&quot;&#10;        @select-slot=&quot;onSkillSlotSelected&quot;&#10;        @close=&quot;closeSkillSlotSelectionPanel&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import ColoredText from './ColoredText.vue';&#10;import AbilityRewardPanel from './AbilityRewardPanel.vue';&#10;import SkillRewardPanel from './SkillRewardPanel.vue';&#10;import SkillSlotSelectionPanel from './SkillSlotSelectionPanel.vue';&#10;import ShopPanel from './ShopPanel.vue';&#10;import PlayerStatusPanel from './PlayerStatusPanel.vue';&#10;import MoneyRewardPanel from './MoneyRewardPanel.vue';&#10;import BreakthroughRewardPanel from './BreakthroughRewardPanel.vue';&#10;import frontendEventBus from &quot;../frontendEventBus&quot;;&#10;import backendEventBus, { EventNames } from &quot;../backendEventBus&quot;;&#10;&#10;export default {&#10;  name: 'RestScreen',&#10;  components: {&#10;    ColoredText,&#10;    AbilityRewardPanel,&#10;    SkillRewardPanel,&#10;    SkillSlotSelectionPanel,&#10;    ShopPanel,&#10;    PlayerStatusPanel,&#10;    MoneyRewardPanel,&#10;    BreakthroughRewardPanel&#10;  },&#10;  props: {&#10;    gameState: {&#10;      type: Object,&#10;      required: true&#10;    }&#10;  },&#10;  data() {&#10;    return {&#10;      currentRewardPanel: '', // 'money', 'breakthrough', 'skill', 'ability', 'shop' or empty&#10;      skillSlotSelectionPanelVisible: false,&#10;      claimingSkill: null,&#10;      rewardPanels: [],&#10;      currentRewardIndex: 0&#10;    }&#10;  },&#10;  mounted() {&#10;    // 初始化奖励面板队列&#10;    this.initRewardPanels();&#10;    // 显示第一个奖励面板&#10;    this.showNextRewardPanel();&#10;    // 监听后端商品购买，弹出UI消息&#10;    backendEventBus.on(EventNames.Shop.ITEM_PURCHASED, (purchasedItem) =&gt; {&#10;      frontendEventBus.emit(&quot;pop-message&quot;, {&#10;        id: 'item-purchased',&#10;        text: `购买了物品：${purchasedItem.name}`&#10;      });&#10;    });&#10;  },&#10;  beforeUnmount() {&#10;    backendEventBus.off &amp;&amp; backendEventBus.off(EventNames.Shop.ITEM_PURCHASED);&#10;  },&#10;  methods: {&#10;    initRewardPanels() {&#10;      this.rewardPanels = [];&#10;      &#10;      // 按顺序添加奖励面板&#10;      if (this.gameState.rewards.money &gt; 0) {&#10;        this.rewardPanels.push('money');&#10;      }&#10;      &#10;      if (this.gameState.rewards.breakthrough) {&#10;        this.rewardPanels.push('breakthrough');&#10;      }&#10;      &#10;      if (this.gameState.rewards.skills.length &gt; 0) {&#10;        this.rewardPanels.push('skill');&#10;      }&#10;      &#10;      if (this.gameState.rewards.abilities.length &gt; 0) {&#10;        this.rewardPanels.push('ability');&#10;      }&#10;      &#10;      // 总是添加商店面板&#10;      this.rewardPanels.push('shop'); &#10;    },&#10;    &#10;    showNextRewardPanel() {&#10;      // 先隐藏当前面板&#10;      this.currentRewardPanel = 'none';&#10;      // 稍等片刻后，再显示下一个面板&#10;      setTimeout(()=&gt; {&#10;        if (this.currentRewardIndex &lt; this.rewardPanels.length) {&#10;          this.currentRewardPanel = this.rewardPanels[this.currentRewardIndex];&#10;        } else {&#10;          // 所有奖励面板都已显示完毕&#10;          this.currentRewardPanel = '';&#10;        }&#10;      }, 500);&#10;    },&#10;    &#10;    onMoneyRewardClaimed() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    onBreakthroughRewardClaimed() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    closeSkillRewardPanel() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;    closeAbilityRewardPanel() {&#10;      this.currentRewardIndex++;&#10;      this.showNextRewardPanel();&#10;    },&#10;&#10;    onSkillRewardSelected(currentSkill) {&#10;      // 简化后的自动升级逻辑：如果奖励技能带有 upgradedFrom，直接替换来源技能&#10;      if(currentSkill.isUpgradeCandidate &amp;&amp; currentSkill.upgradedFrom) {&#10;        const slots = this.gameState.player.skillSlots;&#10;        const sourceSlotIndex = slots.findIndex(s =&gt; s &amp;&amp; s.name === currentSkill.upgradedFrom);&#10;        if(sourceSlotIndex !== -1) {&#10;          const oldSkill = slots[sourceSlotIndex];&#10;          backendEventBus.emit(EventNames.Rest.CLAIM_SKILL, {&#10;            skill: currentSkill,&#10;            slotIndex: sourceSlotIndex,&#10;            clearRewards: false&#10;          });&#10;          frontendEventBus.emit('pop-message', {&#10;            id: 'skill-upgraded',&#10;            text: `技能升级：${oldSkill.name} -&gt; ${currentSkill.name}`&#10;          });&#10;          this.closeSkillRewardPanel();&#10;          return;&#10;        }&#10;      }&#10;      // 回退：未能自动升级则进入槽位选择&#10;      this.claimingSkill = currentSkill;&#10;      setTimeout(() =&gt; { this.skillSlotSelectionPanelVisible = true; }, 300);&#10;    },&#10;    closeSkillSlotSelectionPanel() {&#10;      this.skillSlotSelectionPanelVisible = false;&#10;    },&#10;    onSkillSlotSelected(slotIndex) {&#10;      backendEventBus.emit(EventNames.Rest.CLAIM_SKILL, {&#10;        skill: this.claimingSkill,&#10;        slotIndex,&#10;        clearRewards: false&#10;      });&#10;      // 关闭面板&#10;      this.closeSkillSlotSelectionPanel();&#10;      this.closeSkillRewardPanel();&#10;    },&#10;    onAbilityRewardSelected(ability) {&#10;      backendEventBus.emit(EventNames.Rest.CLAIM_ABILITY, {&#10;        ability,&#10;        clearRewards: false&#10;      });&#10;      this.closeAbilityRewardPanel();&#10;    },&#10;    closeShopPanel() {&#10;      // 结束休整阶段，开始下一场战斗（后端流程监听）&#10;      backendEventBus.emit(EventNames.Rest.FINISH);&#10;    }&#10;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.rest-screen {&#10;  height: 100%;&#10;  width: 100%;&#10;  background-size: cover;&#10;}&#10;&#10;.remi-present-rest-screen {&#10;  background-image: url('@assets/images/shop-background.png');&#10;}&#10;&#10;.rest-screen-content {&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;  max-width: 1200px;&#10;}&#10;&#10;.content-wrapper {&#10;  display: flex;&#10;  flex-direction: row;&#10;  gap: 20px;&#10;  justify-content: center;&#10;  align-items: flex-start;&#10;}&#10;&#10;.rest-title {&#10;  font-size: 2em;&#10;  margin-bottom: 20px;&#10;  color: #eef7ff;&#10;}&#10;&#10;.left-panel-container {&#10;  width: 800px;&#10;  height: 220px;&#10;  position: relative;&#10;  flex-shrink: 0;&#10;}&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SkillRewardPanel.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SkillRewardPanel.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;transition-group name=&quot;slide&quot; tag=&quot;div&quot; class=&quot;skill-reward-panel-wrapper&quot;&gt;&#10;    &lt;div class=&quot;skill-reward-panel&quot; v-if=&quot;isVisible&quot; key=&quot;panel&quot;&gt;&#10;      &lt;h2&gt;选择一个技能！&lt;/h2&gt;&#10;      &lt;div class=&quot;skill-cards&quot;&gt;&#10;        &lt;SkillCard&#10;          v-for=&quot;(skill, index) in skills&quot; &#10;          :key=&quot;'skill-' + index&quot;&#10;          :skill=&quot;skill&quot;&#10;          :preview-mode=&quot;true&quot;&#10;          @skill-card-clicked=&quot;onSkillCardClicked&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;      &lt;button @click=&quot;closePanel&quot;&gt;放弃&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/transition-group&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import SkillCard from './SkillCard.vue';&#10;export default {&#10;  name: 'SkillRewardPanel',&#10;  components: {&#10;    SkillCard&#10;  },&#10;  props: {&#10;    skills: {&#10;      type: Array,&#10;      default: () =&gt; []&#10;    },&#10;    isVisible: {&#10;      type: Boolean,&#10;      default: false&#10;    }&#10;  },&#10;  methods: {&#10;    onSkillCardClicked(skill) {&#10;      this.$emit('selected-skill-reward', skill);&#10;    },&#10;    closePanel() {&#10;      this.$emit('close');&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style scoped&gt;&#10;.skill-reward-panel {&#10;  border: 1px solid #4caf50; /* 绿色边框 */&#10;  padding: 20px;&#10;  background: linear-gradient(135deg, #e8f5e9, #c8e6c9); /* 绿色渐变背景 */&#10;  max-width: 80%;&#10;  margin: 20px auto;&#10;  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);&#10;  border-radius: 8px;&#10;}&#10;&#10;.skill-reward-panel h2 {&#10;  text-align: center;&#10;  margin-bottom: 20px;&#10;  color: #2e7d32; /* 深绿色文字 */&#10;}&#10;&#10;.skill-cards {&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  gap: 20px;&#10;  margin: 20px 0;&#10;  justify-content: center;&#10;}&#10;&#10;.skill-name {&#10;  font-weight: bold;&#10;  font-size: 1.2em;&#10;  margin-bottom: 10px;&#10;  color: #333;&#10;}&#10;&#10;.skill-description {&#10;  color: #666;&#10;  margin-bottom: 10px;&#10;}&#10;&#10;.skill-tier {&#10;  font-style: italic;&#10;  color: #999;&#10;}&#10;&#10;button {&#10;  padding: 10px 15px;&#10;  margin: 5px;&#10;  cursor: pointer;&#10;  background-color: #4caf50; /* 绿色按钮 */&#10;  color: white;&#10;  border: none;&#10;  border-radius: 4px;&#10;}&#10;&#10;button:hover:not(:disabled) {&#10;  background-color: #43a047; /* 深一点的绿色 */&#10;}&#10;&#10;/* 滑动进入和退出动画 */&#10;.slide-enter-active, .slide-leave-active {&#10;  transition: all 0.5s ease;&#10;}&#10;&#10;.slide-enter-from {&#10;  transform: translateY(100%);&#10;  opacity: 0;&#10;}&#10;&#10;.slide-leave-to {&#10;  transform: translateY(-100%);&#10;  opacity: 0;&#10;}&#10;&#10;.slide-enter-to, .slide-leave-from {&#10;  transform: translateY(0);&#10;  opacity: 1;&#10;}&#10;&#10;/* 为transition-group添加样式 */&#10;.skill-reward-panel-wrapper {&#10;  display: flex;&#10;  justify-content: center;&#10;}&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;template&gt;&#13;&#10;  &lt;transition-group name=&quot;slide&quot; tag=&quot;div&quot; class=&quot;skill-reward-panel-wrapper&quot;&gt;&#13;&#10;    &lt;div class=&quot;skill-reward-panel&quot; v-if=&quot;isVisible&quot; key=&quot;panel&quot;&gt;&#13;&#10;      &lt;h2&gt;选择一个技能！&lt;/h2&gt;&#13;&#10;      &lt;div class=&quot;skill-cards&quot;&gt;&#13;&#10;        &lt;SkillCard&#13;&#10;          v-for=&quot;(skill, index) in skills&quot; &#13;&#10;          :key=&quot;skill.uniqueID&quot;&#13;&#10;          :skill=&quot;skill&quot;&#13;&#10;          :preview-mode=&quot;true&quot;&#13;&#10;          @skill-card-clicked=&quot;onSkillCardClicked&quot;&#13;&#10;        /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;      &lt;button @click=&quot;closePanel&quot;&gt;放弃&lt;/button&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  &lt;/transition-group&gt;&#13;&#10;&lt;/template&gt;&#13;&#10;&#13;&#10;&lt;script&gt;&#13;&#10;import SkillCard from './SkillCard.vue';&#13;&#10;export default {&#13;&#10;  name: 'SkillRewardPanel',&#13;&#10;  components: {&#13;&#10;    SkillCard&#13;&#10;  },&#13;&#10;  props: {&#13;&#10;    skills: {&#13;&#10;      type: Array,&#13;&#10;      default: () =&gt; []&#13;&#10;    },&#13;&#10;    isVisible: {&#13;&#10;      type: Boolean,&#13;&#10;      default: false&#13;&#10;    }&#13;&#10;  },&#13;&#10;  methods: {&#13;&#10;    onSkillCardClicked(skill) {&#13;&#10;      this.$emit('selected-skill-reward', skill);&#13;&#10;    },&#13;&#10;    closePanel() {&#13;&#10;      this.$emit('close');&#13;&#10;    }&#13;&#10;  }&#13;&#10;}&#13;&#10;&lt;/script&gt;&#13;&#10;&#13;&#10;&lt;style scoped&gt;&#13;&#10;.skill-reward-panel {&#13;&#10;  border: 1px solid #4caf50; /* 绿色边框 */&#13;&#10;  padding: 20px;&#13;&#10;  background: linear-gradient(135deg, #e8f5e9, #c8e6c9); /* 绿色渐变背景 */&#13;&#10;  max-width: 80%;&#13;&#10;  margin: 20px auto;&#13;&#10;  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);&#13;&#10;  border-radius: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.skill-reward-panel h2 {&#13;&#10;  text-align: center;&#13;&#10;  margin-bottom: 20px;&#13;&#10;  color: #2e7d32; /* 深绿色文字 */&#13;&#10;}&#13;&#10;&#13;&#10;.skill-cards {&#13;&#10;  display: flex;&#13;&#10;  flex-wrap: wrap;&#13;&#10;  gap: 20px;&#13;&#10;  margin: 20px 0;&#13;&#10;  justify-content: center;&#13;&#10;}&#13;&#10;&#13;&#10;.skill-name {&#13;&#10;  font-weight: bold;&#13;&#10;  font-size: 1.2em;&#13;&#10;  margin-bottom: 10px;&#13;&#10;  color: #333;&#13;&#10;}&#13;&#10;&#13;&#10;.skill-description {&#13;&#10;  color: #666;&#13;&#10;  margin-bottom: 10px;&#13;&#10;}&#13;&#10;&#13;&#10;.skill-tier {&#13;&#10;  font-style: italic;&#13;&#10;  color: #999;&#13;&#10;}&#13;&#10;&#13;&#10;button {&#13;&#10;  padding: 10px 15px;&#13;&#10;  margin: 5px;&#13;&#10;  cursor: pointer;&#13;&#10;  background-color: #4caf50; /* 绿色按钮 */&#13;&#10;  color: white;&#13;&#10;  border: none;&#13;&#10;  border-radius: 4px;&#13;&#10;}&#13;&#10;&#13;&#10;button:hover:not(:disabled) {&#13;&#10;  background-color: #43a047; /* 深一点的绿色 */&#13;&#10;}&#13;&#10;&#13;&#10;/* 滑动进入和退出动画 */&#13;&#10;.slide-enter-active, .slide-leave-active {&#13;&#10;  transition: all 0.5s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.slide-enter-from {&#13;&#10;  transform: translateY(100%);&#13;&#10;  opacity: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.slide-leave-to {&#13;&#10;  transform: translateY(-100%);&#13;&#10;  opacity: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.slide-enter-to, .slide-leave-from {&#13;&#10;  transform: translateY(0);&#13;&#10;  opacity: 1;&#13;&#10;}&#13;&#10;&#13;&#10;/* 为transition-group添加样式 */&#13;&#10;.skill-reward-panel-wrapper {&#13;&#10;  display: flex;&#13;&#10;  justify-content: center;&#13;&#10;}&#13;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>