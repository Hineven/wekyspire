<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/GameApp.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/GameApp.vue" />
              <option name="originalContent" value="&lt;template&gt;&#10;  &lt;div id=&quot;game-app&quot;&gt;&#10;    &lt;!-- 开始游戏界面 --&gt;&#10;    &lt;StartScreen &#10;      v-if=&quot;gameState.gameStage === 'start'&quot;&#10;      :game-state=&quot;gameState&quot;&#10;    /&gt;&#10;    &#10;    &lt;!-- 战斗界面 --&gt;&#10;    &lt;BattleScreen &#10;      v-if=&quot;gameState.gameStage === 'battle'&quot;&#10;      :player=&quot;gameState.player&quot;&#10;      :enemy=&quot;gameState.enemy&quot;&#10;      :is-control-disabled=&quot;gameState.controlDisableCount &gt; 0&quot;&#10;      :is-player-turn=&quot;!gameState.isEnemyTurn&quot;&#10;      :level=&quot;gameState.battleCount&quot;&#10;    /&gt;&#10;    &lt;!-- 休整界面 --&gt;&#10;    &lt;RestScreen &#10;      v-if=&quot;gameState.gameStage === 'rest'&quot;&#10;      :game-state=&quot;gameState&quot;&#10;    /&gt;&#10;&#10;    &lt;!-- 结束界面 --&gt;&#10;    &lt;EndScreen &#10;      v-if=&quot;gameState.gameStage === 'end'&quot; &#10;      :is-victory=&quot;gameState.isVictory&quot;&#10;      @restart-game=&quot;restartGame&quot;&#10;    /&gt;&#10;    &#10;    &lt;!-- 对话界面 --&gt;&#10;    &lt;DialogScreen /&gt;&#10;    &#10;    &lt;!-- Boss登场特效界面 --&gt;&#10;    &lt;BossShowupAnimation /&gt;&#10;    &#10;    &lt;!-- 过场动画界面 --&gt;&#10;    &lt;CutsceneScreen :game-state=&quot;gameState&quot; /&gt;&#10;    &#10;    &lt;!-- 音频控制界面 --&gt;&#10;    &lt;AudioControllerScreen /&gt;&#10;    &#10;    &lt;!-- 粒子效果管理器 --&gt;&#10;    &lt;ParticleEffectManager /&gt;&#10;    &#10;    &lt;!-- 消息弹出框界面 --&gt;&#10;    &lt;MessagePopupScreen /&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import StartScreen from './components/StartScreen.vue'&#10;import BattleScreen from './components/BattleScreen.vue'&#10;import RestScreen from './components/RestScreen.vue'&#10;import EndScreen from './components/EndScreen.vue'&#10;import DialogScreen from './components/DialogScreen.vue'&#10;import BossShowupAnimation from './components/BossShowupAnimation.vue'&#10;import CutsceneScreen from './components/CutsceneScreen.vue'&#10;import AudioControllerScreen from './components/AudioControllerScreen.vue'&#10;import ParticleEffectManager from './components/ParticleEffectManager.vue'&#10;import MessagePopupScreen from './components/MessagePopupScreen.vue'&#10;import SkillManager from './data/skillManager.js'&#10;&#10;import eventBus from './eventBus.js'&#10;import * as dialogues from './data/dialogues.js'&#10;import { displayGameState as gameState, backendGameState, resetAllGameStates } from './data/gameState.js';&#10;import { startBattle } from './data/battle.js'&#10;&#10;export default {&#10;  name: 'App',&#10;  components: {&#10;    StartScreen,&#10;    BattleScreen,&#10;    RestScreen,&#10;    EndScreen,&#10;    DialogScreen,&#10;    BossShowupAnimation,&#10;    CutsceneScreen,&#10;    AudioControllerScreen,&#10;    ParticleEffectManager,&#10;    MessagePopupScreen&#10;  },&#10;  computed: {&#10;    isPlayerTurn() {&#10;      return !gameState.isEnemyTurn;&#10;    }&#10;  },&#10;  data() {&#10;    return {&#10;      gameState: gameState&#10;    }&#10;  },&#10;  mounted() {&#10;    this.eventBus = eventBus;&#10;    // 不再在App层维护战斗日志，交由BattleScreen本地管理&#10;    // 注册对话监听&#10;    dialogues.registerListeners(eventBus);&#10;    dialogues.setIsRemiPresent(gameState.isRemiPresent);&#10;&#10;    this.eventBus.on('start-game', () =&gt; {&#10;        this.startGame();&#10;    });&#10;    },&#10;  beforeUnmount() {&#10;    if(this.eventBus) {&#10;      this.eventBus.off('start-game');&#10;      dialogues.unregisterListeners(eventBus);&#10;    }&#10;  },&#10;  watch: {&#10;    // 当显示层的故事模式开关变化时，同步给对话系统&#10;    'gameState.isRemiPresent'(val) {&#10;      dialogues.setIsRemiPresent(val);&#10;    }&#10;  },&#10;  methods: {&#10;    startGame() {&#10;      // 触发开场事件&#10;      eventBus.emit('before-game-start');&#10;      &#10;      // 为玩家添加初始技能到技能槽（写入后端状态）&#10;      const initialSkill1 = SkillManager.getInstance().createSkill('拳打脚踢');&#10;      backendGameState.player.skillSlots[0] = initialSkill1;&#10;      const initialSkill2 = SkillManager.getInstance().createSkill('活动筋骨');&#10;      backendGameState.player.skillSlots[1] = initialSkill2;&#10;      const initialSkill3 = SkillManager.getInstance().createSkill('打滚');&#10;      backendGameState.player.skillSlots[2] = initialSkill3;&#10;      const initialSkill4 = SkillManager.getInstance().createSkill('抱头防御');&#10;      backendGameState.player.skillSlots[3] = initialSkill4;&#10;&#10;      backendGameState.gameStage = 'battle';&#10;&#10;      // 开始第一场战斗（写入后端状态）&#10;      startBattle();&#10;    },&#10;    restartGame() {&#10;      // 重置两份游戏状态&#10;      resetAllGameStates();&#10;&#10;    },&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;#game-app {&#10;  font-family: Avenir, Helvetica, Arial, sans-serif;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  text-align: center;&#10;  /* color: #eef7ff; */&#10;  /* margin-top: 60px; */&#10;  user-select: none;&#10;  position: relative;&#10;  height:100vh;&#10;}&#10;&#10;&lt;/style&gt;" />
              <option name="updatedContent" value="&lt;template&gt;&#10;  &lt;div id=&quot;game-app&quot;&gt;&#10;    &lt;!-- 开始游戏界面 --&gt;&#10;    &lt;StartScreen &#10;      v-if=&quot;gameState.gameStage === 'start'&quot;&#10;      :game-state=&quot;gameState&quot;&#10;    /&gt;&#10;    &#10;    &lt;!-- 战斗界面 --&gt;&#10;    &lt;BattleScreen &#10;      v-if=&quot;gameState.gameStage === 'battle'&quot;&#10;      :player=&quot;gameState.player&quot;&#10;      :enemy=&quot;gameState.enemy&quot;&#10;      :is-control-disabled=&quot;gameState.controlDisableCount &gt; 0&quot;&#10;      :is-player-turn=&quot;!gameState.isEnemyTurn&quot;&#10;      :level=&quot;gameState.battleCount&quot;&#10;    /&gt;&#10;    &lt;!-- 休整界面 --&gt;&#10;    &lt;RestScreen &#10;      v-if=&quot;gameState.gameStage === 'rest'&quot;&#10;      :game-state=&quot;gameState&quot;&#10;    /&gt;&#10;&#10;    &lt;!-- 结束界面 --&gt;&#10;    &lt;EndScreen &#10;      v-if=&quot;gameState.gameStage === 'end'&quot; &#10;      :is-victory=&quot;gameState.isVictory&quot;&#10;      @restart-game=&quot;restartGame&quot;&#10;    /&gt;&#10;    &#10;    &lt;!-- 对话界面 --&gt;&#10;    &lt;DialogScreen /&gt;&#10;    &#10;    &lt;!-- Boss登场特效界面 --&gt;&#10;    &lt;BossShowupAnimation /&gt;&#10;    &#10;    &lt;!-- 过场动画界面 --&gt;&#10;    &lt;CutsceneScreen :game-state=&quot;gameState&quot; /&gt;&#10;    &#10;    &lt;!-- 音频控制界面 --&gt;&#10;    &lt;AudioControllerScreen /&gt;&#10;    &#10;    &lt;!-- 粒子效果管理器 --&gt;&#10;    &lt;ParticleEffectManager /&gt;&#10;    &#10;    &lt;!-- 消息弹出框界面 --&gt;&#10;    &lt;MessagePopupScreen /&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;import StartScreen from './components/StartScreen.vue'&#10;import BattleScreen from './components/BattleScreen.vue'&#10;import RestScreen from './components/RestScreen.vue'&#10;import EndScreen from './components/EndScreen.vue'&#10;import DialogScreen from './components/DialogScreen.vue'&#10;import BossShowupAnimation from './components/BossShowupAnimation.vue'&#10;import CutsceneScreen from './components/CutsceneScreen.vue'&#10;import AudioControllerScreen from './components/AudioControllerScreen.vue'&#10;import ParticleEffectManager from './components/ParticleEffectManager.vue'&#10;import MessagePopupScreen from './components/MessagePopupScreen.vue'&#10;import SkillManager from './data/skillManager.js'&#10;&#10;import eventBus from './eventBus.js'&#10;import * as dialogues from './data/dialogues.js'&#10;import { displayGameState as gameState, backendGameState, resetAllGameStates } from './data/gameState.js';&#10;import { startBattle } from './data/battle.js'&#10;&#10;export default {&#10;  name: 'App',&#10;  components: {&#10;    StartScreen,&#10;    BattleScreen,&#10;    RestScreen,&#10;    EndScreen,&#10;    DialogScreen,&#10;    BossShowupAnimation,&#10;    CutsceneScreen,&#10;    AudioControllerScreen,&#10;    ParticleEffectManager,&#10;    MessagePopupScreen&#10;  },&#10;  computed: {&#10;    isPlayerTurn() {&#10;      return !gameState.isEnemyTurn;&#10;    }&#10;  },&#10;  data() {&#10;    return {&#10;      gameState: gameState&#10;    }&#10;  },&#10;  mounted() {&#10;    this.eventBus = eventBus;&#10;    // 不再在App层维护战斗日志，交由BattleScreen本地管理&#10;    // 注册对话监听&#10;    dialogues.registerListeners(eventBus);&#10;    dialogues.setIsRemiPresent(gameState.isRemiPresent);&#10;&#10;    this.eventBus.on('start-game', () =&gt; {&#10;        this.startGame();&#10;    });&#10;    },&#10;  beforeUnmount() {&#10;    if(this.eventBus) {&#10;      this.eventBus.off('start-game');&#10;      dialogues.unregisterListeners(eventBus);&#10;    }&#10;  },&#10;  watch: {&#10;    // 当显示层的故事模式开关变化时，同步给对话系统&#10;    'gameState.isRemiPresent'(val) {&#10;      dialogues.setIsRemiPresent(val);&#10;    }&#10;  },&#10;  methods: {&#10;    startGame() {&#10;      // 触发开场事件&#10;      eventBus.emit('before-game-start');&#10;      &#10;      // 为玩家添加初始技能到技能槽（写入后端状态）&#10;      const initialSkill1 = SkillManager.getInstance().createSkill('拳打脚踢');&#10;      const initialSkill2 = SkillManager.getInstance().createSkill('活动筋骨');&#10;      const initialSkill3 = SkillManager.getInstance().createSkill('打滚');&#10;      const initialSkill4 = SkillManager.getInstance().createSkill('抱头防御');&#10;&#10;      // 以一次性替换数组的方式写入，减少深度watch触发次数&#10;      const slots = backendGameState.player.skillSlots.slice();&#10;      slots[0] = initialSkill1;&#10;      slots[1] = initialSkill2;&#10;      slots[2] = initialSkill3;&#10;      slots[3] = initialSkill4;&#10;      backendGameState.player.skillSlots = slots;&#10;&#10;      // 开始第一场战斗（写入后端状态）&#10;      startBattle();&#10;    },&#10;    restartGame() {&#10;      // 重置两份游戏状态&#10;      resetAllGameStates();&#10;&#10;    },&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style&gt;&#10;#game-app {&#10;  font-family: Avenir, Helvetica, Arial, sans-serif;&#10;  -webkit-font-smoothing: antialiased;&#10;  -moz-osx-font-smoothing: grayscale;&#10;  text-align: center;&#10;  /* color: #eef7ff; */&#10;  /* margin-top: 60px; */&#10;  user-select: none;&#10;  position: relative;&#10;  height:100vh;&#10;}&#10;&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>